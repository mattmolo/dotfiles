################################################
# Aliases                                      #
################################################

# Remember platform
platform=$(uname)

# Easy edits to bash/zsh files
alias bashrc="vim ~/.bashrc; source ~/.bashrc"
alias zshrc="vim ~/.zshrc; source ~/.zshrc"

# For BASH only
if [ -n "${BASH+set}" ]; then
    alias resource="source ~/.bashrc"
fi

# For ZSH only
if [ -n "${ZSH_NAME+set}" ]; then
    alias resource="source ~/.zshrc"
fi

# Easy directory traveral
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ......="cd ../../../../.."
alias .......="cd ../../../../../.."
alias ........="cd ../../../../../../.."

# tiny aliases for misc things
alias c="print '\a'; clear;"
alias e="exit"
alias v="vim"
alias cdd="cd ~/Desktop/"
alias pt="ping 8.8.8.8"

# add support for ctrl+o to open selected file in vim
export FZF_DEFAULT_OPTS="--bind='ctrl-o:execute(vim {})+abort'"
export FZF_DEFAULT_COMMAND='rg --files'
alias f="fzf --preview 'bat --color \"always\" {}'"

vimf() {
    file=$(fzf --height 40%)

    if [ -z "$file" ]; then
        ;
    else
        vim $file
    fi
}
alias vf=vimf

vimr() {
    if [ $# -eq 0 ]; then
        read search
    else
        $search = $1
    fi


    rg $search
    file=$(rg -l $search | fzf --height=40% --layout=reverse)

    if [ -z ${file+x} ]; then
        ;
    else
        vim $file
    fi
}

alias r="rg --no-heading"

# sl fun
#alias choochoo="while true; do /usr/local/opt/sl/bin/sl; done"


function python-server {
    python -m SimpleHTTPServer $1
}

function php-server {
    php -S localhost:8000 -t .
}

# tmux things
alias tls="tmux ls"
alias tkill="tmux kill-session -t"
tnew() {
    if [ $# -eq 0 ] ; then
        tmux new
    else
        tmux new -s $1
    fi
}

tatt() {
    if [ $# -eq 0 ] ; then
        tmux attach
    else
        tmux attach -t $1 $2
    fi
}
alias t="tnew"


# git things
alias gadd="git add"
alias gs="git status"
alias gc="git checkout"
alias gpull="git pull"
alias gpush="git push"
alias gd="git diff"
alias gnotrack="git update-index --assume-unchanged"
alias gtrack="git update-index --no-assume-unchanged"
alias grekt="git reset --hard HEAD"

gpr(){
    remote=`git remote -v | grep origin | head -1 | awk '{print $2}' | sed 's/.*:\(.*\)*/\1/' | sed 's/\.git$//'`
    branch=`git rev-parse --abbrev-ref HEAD`
    open "https://github.com/$remote/compare/${1:-master}...$branch?expand=1"
}

gcom() {
    git commit -am $1
}

# Grep for a match, recursively, with colors and numbers
grr() {
    egrep -rni --color $1 *
}

http-post() {
    curl -s -d \
    $2 -H "Content-Type: application/json" \
    -X POST \
    $1
}

http-put() {
    curl -s -d \
    $2 -H "Content-Type: application/json" \
    -X PUT \
    $1
}

http-patch() {
    curl -s -d \
    $2 -H "Content-Type: application/json" \
    -X patch \
    $1
}

http-delete() {
    curl -s \
    -X DELETE \
    $1
}

http-get() {
    curl -s $1
}

json-post() {
    curl -s -d \
    $2 -H "Content-Type: application/json" \
    -X POST \
    $1 | jq
}

json-put() {
    curl -s -d \
    $2 -H "Content-Type: application/json" \
    -X PUT \
    $1 | jq
}

json-patch() {
    curl -s -d \
    $2 -H "Content-Type: application/json" \
    -X patch \
    $1 | jq
}

json-delete() {
    curl -s \
    -X DELETE \
    $1 | jq
}

json-get() {
    curl -s $1 | jq
}

# python venv helper
venv() {
    # Deactivate if virtual env is active and return
    if [ -n "${VIRTUAL_ENV+set}" ]; then
        echo "Deactivating virtual env..."
        deactivate
        return
    fi

    # Default to venv dir for virtual env
    V_DIR="venv"

    # Argument 1 can override default dir
    if [ -n "${1+set}" ]; then
        V_DIR="$1"
    fi

    # If folder doesn't exist, make it
    if [ ! -d "$V_DIR" ]; then
        echo "Creating virtual env in \"$V_DIR\"..."
        virtualenv "$V_DIR"
    fi

    # Activate the virtual env
    echo "Activating virtual env..."
    source "$V_DIR/bin/activate"
}

venv3() {
    # Deactivate if virtual env is active and return
    if [ -n "${VIRTUAL_ENV+set}" ]; then
        echo "Deactivating virtual env..."
        deactivate
        return
    fi

    # Default to venv dir for virtual env
    V_DIR="venv"

    # Argument 1 can override default dir
    if [ -n "${1+set}" ]; then
        V_DIR="$1"
    fi

    # If folder doesn't exist, make it
    if [ ! -d "$V_DIR" ]; then
        echo "Creating virtual env in \"$V_DIR\"..."
        virtualenv -p python3 "$V_DIR"
    fi

    # Activate the virtual env
    echo "Activating virtual env..."
    source "$V_DIR/bin/activate"
}

if [[ $platform == 'Linux' ]]; then
    # Linux things
    alias apt="sudo apt-get"
    alias ls='ls --color=auto'
    alias l='ls -lahF --color=always'
elif [[ $platform == 'Darwin' ]]; then
    # OS X things
    alias pb="pbpaste | pbcopy"
    alias ls='ls -G'
    alias l='ls -lahFG'
    alias o="open"
fi

# extract a file
function extract {
  if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
  else
    if [ -f $1 ] ; then
      # NAME=${1%.*}
      # mkdir $NAME && cd $NAME
      case $1 in
        *.tar.bz2) tar xvjf ./$1 ;;
        *.tar.gz) tar xvzf ./$1 ;;
        *.tar.xz) tar xvJf ./$1 ;;
        *.lzma) unlzma ./$1 ;;
        *.bz2) bunzip2 ./$1 ;;
        *.rar) unrar x -ad ./$1 ;;
        *.gz) gunzip ./$1 ;;
        *.tar) tar xvf ./$1 ;;
        *.tbz2) tar xvjf ./$1 ;;
        *.tgz) tar xvzf ./$1 ;;
        *.zip) unzip ./$1 ;;
        *.Z) uncompress ./$1 ;;
        *.7z) 7z x ./$1 ;;
        *.xz) unxz ./$1 ;;
        *.exe) cabextract ./$1 ;;
        *) echo "extract: '$1' - unknown archive method" ;;
      esac
    else
      echo "$1 - file does not exist"
    fi
  fi
}
alias x="extract"

function docker_clean {
    # remove all exited containers
    if [[ -n $(docker ps -aq -f status=exited) ]]; then
        docker rm $(docker ps -aq -f status=exited)
    fi

    # remove <none> images
    if [[ -n $(docker images -q --filter "dangling=true") ]]; then
        docker rmi -f $(docker images -q --filter "dangling=true")
        # docker rmi $(docker images | grep "^<none>" | awk '{print $3}')
    fi
}
alias dclean="docker_clean"

alias now="date -u +'%Y-%m-%d %H:%M:%SZ'"
